package main

import (
	"math"
	"testing"
)

var vector10 Vector = Vector{
	0.55597, 0.51218, 0.91893, 0.10169, -0.42851, 2.16980, -0.14435,
	1.13380, -0.54275, 0.57150,
}
var vector100 Vector = Vector{
	0.339013, 0.108058, 1.532268, 0.198429, 1.396348, -0.083381, 0.320282,
	1.399763, 0.539867, 2.132957, -0.292945, -0.890790, -0.427039, -0.536695,
	1.265576, -0.500117, 0.062218, 0.876928, 0.275817, 0.862499, -0.470454,
	-0.329710, -0.745712, -0.059044, 1.201049, -0.227569, -0.580498, -1.419305,
	-1.079279, -0.159020, -0.127839, 0.442837, 1.040854, -0.387964, -0.933783,
	0.496674, 0.065344, 0.726632, -0.516976, -1.011266, -0.111985, -1.373314,
	1.244200, 0.667418, -1.180149, 2.482343, -0.171780, -0.088700, 0.761538,
	-1.742121, -0.038088, 1.292492, 1.249670, 1.719094, -0.325254, 0.176489,
	1.496330, 1.222078, 1.070204, -0.758924, -1.021923, -0.739206, 0.386577,
	-0.851941, 1.813599, 0.743145, 1.143766, -0.905412, 0.559133, -1.213518,
	1.352382, 0.278966, 0.237961, 0.051013, -2.531361, 0.159041, 0.863990,
	-0.963585, 1.196397, 0.133156, 0.133173, -0.046921, 0.411999, -0.792456,
	-2.260651, -0.863010, 1.246806, 1.980552, -0.633171, 0.359886, 0.587259,
	-0.677205, -0.187406, 1.286645, 0.287566, -1.481147, -0.094578, -1.736139,
	-1.699101, 0.871652,
}
var vector1000 Vector = Vector{
	1.1256337, 0.0655415, -0.9974937, -1.1137565, 0.3078727, -1.1160827,
	-1.1403261, -2.2497551, -1.3253497, 0.5407914, -0.7344589, 1.1829830,
	-0.2783937, 1.1540878, -0.8230770, 0.7119954, 0.4041314, -1.4774145,
	0.7120996, 0.3243264, 0.8690223, -0.9100031, 0.1900355, 0.5859305,
	0.3449416, -0.4481331, 0.2529390, 0.4897731, -1.6977221, 0.7064555,
	-0.0124408, 0.8187345, -0.5723895, -0.1695899, -0.7463189, 1.5951275,
	-1.2998773, 0.6193239, 0.7985423, -0.3446034, 0.7610814, 0.0993454,
	0.4307554, -0.3890001, 0.6194873, -0.8374932, -0.2754788, -0.5693565,
	-0.3264281, -0.0023047, -1.5538583, 0.0416445, -0.9352696, -0.3953656,
	0.9849477, -0.7097774, -0.8091446, -0.8464861, 1.7141778, -1.7416428,
	-0.0710381, -1.5655751, -0.8461414, 1.2989055, 0.5896983, 0.8995023,
	-0.4410735, 0.5844369, -0.1978300, 0.2312096, -0.8053287, -0.1871521,
	-1.3325200, -0.7421702, 0.3475438, 0.7382793, -0.1236370, -2.1007235,
	-0.6107416, 0.3243690, -0.2936297, 1.2993922, -1.4699664, 1.5554969,
	0.9273394, 0.9125809, 0.9030201, -1.3700302, -0.7314258, -0.1692926,
	0.6917496, -1.0031320, 0.6819940, 0.1100287, -0.9022871, -1.3039712,
	-2.0095150, 0.7364560, 0.3863222, 3.2396479, -1.8529587, 0.9176961,
	-0.8438700, -0.6462377, 1.8900782, 0.2502724, -0.6226360, 0.2690781,
	-0.2813923, -1.0291947, 0.0071087, 0.9243045, -0.0774502, -0.3442860,
	-0.5233172, 1.2161282, -0.7530339, -0.0824782, -0.4703922, 1.2040567,
	-0.7047085, 0.9009792, -2.0412538, 0.5864965, 0.8336342, -0.9501463,
	0.1112213, 0.7762656, -0.8093657, 0.2445813, -0.4631431, 0.7524361,
	1.3384874, -0.2389748, -2.0389349, 1.0144458, 0.9573858, -1.2425679,
	0.9934227, -0.2790905, 1.0043528, 1.4914887, 0.5071598, -0.3356764,
	0.1869130, 0.1251806, -1.0017157, -0.4213649, -1.0205394, 1.7011789,
	-0.2788193, -0.5919414, 1.0460612, 1.5995500, -0.5581670, -1.5244401,
	0.0728499, 1.2008580, 0.1360300, -0.0580109, 0.9914576, 0.5922481,
	-0.5450897, -1.3812475, 1.4312530, -0.4543757, -0.2718375, 0.2721829,
	0.7866184, 0.5608863, 1.1643748, 0.1996754, 0.4511741, 0.2634369,
	-2.0134723, 0.3704365, -1.2020527, -1.9126277, -0.9347495, -0.2919212,
	0.5456135, -0.0591395, 0.1411103, -0.8149858, 0.0835551, -0.8687917,
	-0.9158735, -0.6577430, 0.6466432, 1.0583341, -0.0517339, -1.7345854,
	-1.2235516, 0.3467186, -2.1018720, 0.1122143, -2.8364923, -0.6430048,
	-1.3765646, -0.0821288, -0.7915497, -0.2006154, 2.4443209, 1.6991978,
	0.5605252, -0.2578413, -0.3192073, -0.3705073, -0.6122521, 0.0531786,
	1.2323744, -0.5320139, 0.7285872, 0.5482072, -1.3498651, 0.1826115,
	-0.9331641, -0.6013136, 0.3688211, 0.7109194, 0.2349332, 0.0071848,
	-0.8904567, -2.1130722, -1.7852432, -0.8865107, 1.2982212, 0.4457844,
	0.9460499, -0.0695222, 0.4169337, -1.3720845, -1.4428045, 0.5793386,
	0.3279397, -0.4708176, 0.9302116, -1.5306420, -1.2922002, 0.6064795,
	0.2856477, -0.6931747, 0.9455647, -0.4103351, -2.0747280, 0.9065152,
	-0.7574328, 1.9002460, -0.9805222, -0.5065548, 0.9228516, 0.4162171,
	-0.9730815, -0.7137715, 0.4662822, -2.0951066, -0.9541210, 0.7455352,
	0.5707114, -0.4140612, -0.2154852, 0.1716209, -0.6012074, -0.8452212,
	-1.9969212, 0.6329151, -0.4243476, -0.0471544, -0.5954719, 0.5725992,
	0.0901117, -0.5213281, 2.1716492, -0.1507195, 1.2167921, 1.4995271,
	0.7131949, 0.5719397, -0.9077595, -0.9768859, 0.6965212, 0.7152796,
	-1.1758494, 0.0444772, 0.6422375, -1.6490772, 0.9700259, -0.2375972,
	-0.5657743, 1.2431602, 0.7387887, -0.7201007, 0.9919524, -0.1473663,
	1.4463537, 2.2229333, -0.6058761, -0.5515922, -0.0903831, 0.0614110,
	1.0362121, 1.9542122, 2.1219301, -0.3547106, -0.7301296, 0.2568050,
	1.1431789, 0.8264374, 1.8981612, 0.7406515, -0.0601199, -1.2160013,
	0.5504956, -1.8629360, 1.1567490, 0.5268323, -1.2350606, 0.7620106,
	-0.7643499, -0.2821282, -0.2778813, 0.4445327, 0.9151275, -0.9994377,
	-0.7600765, -0.1644632, -1.0767467, -0.0319323, 1.2406099, 0.7285803,
	1.6217772, 0.4567500, 0.7678221, -1.6570727, -0.3634971, -0.1877226,
	0.4744336, -2.1324992, -0.5055073, -0.7794064, -0.1734267, -0.9534127,
	0.1978801, 0.7064594, -1.1769449, -0.8172610, 0.4900314, -0.5093746,
	0.7952472, 1.1572278, -1.1168537, 1.2710370, -0.3351537, -0.3474281,
	-1.0443796, -0.7534021, -1.9604386, 0.0641433, 2.1802630, 0.3499473,
	0.2389000, -0.9297421, 1.5564388, -0.5629951, -1.7824537, -0.0589708,
	1.2808022, 0.3343566, 1.5088513, 0.2723916, -0.0900952, -0.9218281,
	-1.1166303, 0.8424250, -0.0404584, -0.7129294, -1.1380541, -0.4551010,
	0.6419679, -0.5812036, -1.3880101, 1.6738567, 0.6707862, -1.1529714,
	0.9070832, 1.9617115, -0.3395872, 0.6238999, -1.2177604, -0.6051895,
	-0.0034973, -0.2542259, -0.3123873, 1.4463521, 1.6460552, 1.6062094,
	-0.1524941, 0.0242366, 1.3221457, -0.5821062, -0.6971452, 0.4795390,
	-0.6733835, -1.1114646, 1.9113575, -2.0615132, -0.3115133, 0.5917084,
	-0.6901072, -1.0412849, 0.5295804, 0.8984554, 0.3822412, 2.0918288,
	0.7485124, 0.8235209, -2.2190781, 0.6043761, -1.4715992, -0.2905860,
	2.3032465, 2.1724348, -0.2076247, 0.6803765, 0.6480542, -0.9771326,
	0.4059216, -1.9954394, -0.2222729, 0.4652715, 0.7294530, 0.4717570,
	0.1311573, -0.1744695, -1.0021765, -0.2575990, -2.2237968, -1.5055057,
	0.3778687, 0.0528463, 0.8013192, -0.0697633, 0.0844584, 1.2345803,
	0.8295839, 1.8820006, -0.4561917, 1.3495829, -0.5775791, -0.7230501,
	0.3345673, 1.0741755, 0.7809682, 0.1955061, 0.7987489, -0.3534268,
	-1.3047742, 0.0605236, -0.4441742, -0.6429817, 0.3953544, 0.9659090,
	-1.0191499, -0.3539522, 0.7807750, 1.4697527, 0.6229298, 0.6317311,
	-0.7878370, -1.2791557, 0.5130324, -0.6795152, -0.0988298, -1.2428221,
	0.8414801, -2.1545148, 0.7328365, -0.5265191, -1.9494767, -1.1589026,
	-0.8323529, 1.2813700, 1.7766553, -0.3331823, -1.3523465, 0.1971493,
	0.6277267, 0.6830643, 0.6517963, 0.0930258, 0.2876585, 0.1498593,
	1.0802758, -1.2442199, 0.6239033, -1.7952540, 0.1283395, 0.5761533,
	-1.0670044, -0.3434323, 0.7612135, -1.4319311, 0.4213230, -0.5189775,
	-0.8707007, -0.4728613, 0.8552733, 0.2962720, -1.1974468, -1.7890513,
	0.5340699, -1.9662774, -1.1576644, -0.7299411, 0.6858296, -1.3945256,
	1.0303434, -2.1714008, 0.5170282, 0.9101183, -0.2918047, 1.2737201,
	-0.1031209, -0.1637830, 1.4563348, -0.0097408, 0.6301184, -1.2620360,
	-0.1709244, -0.3877175, 1.9467703, 0.0554739, -0.2392569, 0.3668119,
	0.4868685, -0.6643008, -0.1517434, 0.4667166, 0.9156023, -0.4894882,
	-0.6613182, 0.7983837, -0.4476351, -0.5988758, 1.1132385, -0.9305093,
	-1.7748977, -0.0808843, 1.1805291, 0.3901985, -1.4268944, -1.0340371,
	1.6056101, 0.9286224, 0.1354274, 0.4382701, -0.4767274, -2.2089891,
	0.7352793, -0.1591665, -1.3647509, -1.7665716, -0.9485813, -1.3441455,
	0.1586480, 1.6856613, 1.4165151, -0.2664051, 1.3882784, -0.6992202,
	0.4050496, 0.4877973, 0.0152151, 1.0338076, -0.5126354, -0.4239128,
	0.8213332, 0.5225001, -0.4282640, 0.7567984, -0.5329201, -0.3873167,
	-0.9023735, -0.6830094, -0.1827234, 1.9260424, -0.2680643, 1.2377572,
	0.1741654, 0.3622065, 0.1587085, 0.1591214, -0.1861682, 0.0375222,
	0.6596813, 0.9822555, -0.3596258, -0.6357824, 0.2302258, 0.2754401,
	-0.4196902, -0.0860721, 0.3533225, -0.5080341, 1.3482933, -0.2862954,
	1.7396147, -1.0819921, -0.9221337, -0.1748058, -0.2335567, 0.5523015,
	0.3826995, 0.6306040, 0.5360498, -0.3992813, -0.2488087, -0.0081282,
	-1.8337319, -2.2757089, 1.3648988, -0.3646549, -0.5441204, 0.0541431,
	-1.8191723, -0.1365456, -0.4265757, -0.3334438, -0.4456716, -1.1576219,
	0.5424664, 1.1278288, 1.4249285, 1.8993247, 0.2931707, -1.6704173,
	-1.0264441, 0.8666056, 0.5811054, -0.8447516, -3.6509857, 0.7823910,
	-0.9091406, 0.8362634, -0.2715990, 1.2043045, 1.0086459, 0.3964505,
	-0.0332396, 0.7182833, 0.4248853, -1.3171489, 0.9829991, -0.3115144,
	1.2419332, -0.0062804, -1.6291317, -0.3729968, -1.0897480, 0.3038751,
	0.7701069, 0.6685060, -1.4538376, 0.8837919, -0.0556720, -0.0433671,
	1.2608342, -0.0520854, 0.3311599, 0.2046063, 0.3393738, -0.3227776,
	-0.2187358, -0.2017789, 0.2024769, 0.6313295, 0.9218082, -0.0933352,
	0.2521624, -0.9586188, -0.5431973, -1.0042855, 0.8103833, 0.6081941,
	-0.4201418, 0.6212092, 0.2785016, -0.7596638, -0.1079775, 0.5523986,
	-0.6437544, 0.3487587, -2.9284425, -0.0484842, 1.1290858, 0.6576667,
	1.9412093, -1.0547965, -0.5982338, -1.8632739, 0.0343968, -0.6635903,
	0.9891183, -0.2464253, 1.3763354, 2.4570785, -1.5350941, 1.1023333,
	-2.3248868, 0.7469705, -0.2872297, -0.6453619, -0.7474796, 0.7567348,
	0.9873451, 0.2841560, 1.6870250, 1.5526248, -1.1093597, 0.9434826,
	-0.5893412, -1.8326336, 1.2684696, -0.2516760, -1.4765899, 0.1309893,
	0.1915616, 0.9256533, 0.2387764, 0.2113506, -1.6526011, -0.7066833,
	-0.4718800, -0.3019875, -0.1328948, -1.3144685, 1.7924252, -0.9122560,
	0.2071052, 0.9123459, -0.8044134, 1.3069048, -0.8879949, -0.9119749,
	-0.6195112, -0.2016928, 0.0314905, 0.2773573, -0.6129835, -1.8675494,
	-0.3167727, 0.0496688, -0.3948876, 0.5903047, -0.9257127, 0.5733095,
	-0.8737590, 1.1146742, -0.9359915, 1.3185184, 0.3385722, -0.9809539,
	0.0505995, -0.0375870, -0.2066258, -1.3111944, 0.3844309, 2.2327354,
	-0.5459360, -0.5894127, -0.5209839, -0.5868268, -0.7746534, 1.0651186,
	0.3632960, -0.0040827, -0.5132604, 0.0874846, -0.7632371, -1.1610479,
	-0.3526018, -2.3010550, 0.4912366, 0.1063183, -0.4981584, -0.1860140,
	-0.7742312, -0.6827187, -0.6081322, -0.5422643, 0.8965878, -0.9126613,
	-0.4098781, -0.2937515, -0.8040718, -1.7438672, -0.4058006, 0.4628822,
	-0.6311775, 0.2062920, -0.5626903, -1.0930932, -0.7741585, -1.1397607,
	0.2056779, -0.3319515, 0.9172367, 0.4049760, 1.0999374, 0.7923799,
	0.6698930, -0.1960954, 0.9934427, 1.7689029, -0.3179374, 0.0521445,
	1.5076791, 1.3116844, -0.4395697, 0.9432468, -1.1488724, 0.8883606,
	0.1323844, -2.7181118, 0.6804569, 1.2099835, 1.3895930, 0.6097397,
	1.1710126, 1.1251611, -1.1970249, -0.5499786, -0.1027726, 0.4611212,
	0.1243979, -1.4963598, -0.8258839, -0.1452141, -0.4761565, -1.3091491,
	0.5458161, 1.2978172, 0.5711119, 0.5414987, 0.0028442, 0.4789301,
	-0.4341493, -0.2459865, -0.8402169, -0.7184892, 0.2738295, -1.3849562,
	-1.3360879, 0.8065852, -1.2803293, -0.6575229, 0.9256649, -1.3557426,
	0.8276161, -1.1242328, -0.8127062, 0.0664188, -0.9293833, -1.0646105,
	1.1246092, 0.0548678, 1.2163513, 0.4868635, 0.0691340, 0.2635382,
	-0.1122263, -0.9372348, -1.0045888, 0.7000752, 1.3047739, 0.5239608,
	-0.1535142, 0.8126341, 1.5357497, 0.0060250, -1.8026170, -2.0023820,
	0.6968902, 1.0064934, 0.3840064, -0.7232332, 0.3521973, 0.0161061,
	1.4958605, -1.1527895, 1.0958149, -2.6997871, -1.1037221, -0.2769704,
	-1.0554516, -1.2561640, 0.4574159, 0.0963627, 0.1821348, 1.7941511,
	-0.5276296, -0.3818981, 2.5396283, -0.7725759, 0.2660796, 0.2461622,
	-0.0748400, -1.9510064, 0.6696730, -1.1045427, -0.5826454, 1.2538635,
	0.5686225, -0.3895671, -0.6390515, -0.6376383, -1.7313861, 1.4454995,
	-1.3247477, -0.7445429, -0.8969213, 0.4260576, -0.6226684, 0.3992886,
	-0.0383056, -1.1129154, -0.9061233, 0.5852135, -1.1511352, -1.2591028,
	-0.5807106, -1.4554437, 0.2857392, -0.0880176, -0.8768172, 0.9521869,
	0.4732682, -1.3380260, -2.1177454, 1.2600665, -1.1902660, 2.8376048,
	1.3976901, 0.4140355, 0.4371857, 0.0116620, -0.1864413, -0.6251441,
	0.5787359, -2.6469464, -0.1448474, -0.9907089, -0.1264070, 0.0504552,
	0.2337014, 1.8706090, -0.2410579, 1.2857084, 0.9255792, 2.0937958,
	0.1743442, 1.6447405, 1.4410233, 0.5856906, -0.1808712, 2.2296801,
	-1.6748832, -1.7504928, -0.0412316, -0.5573021, -0.7602265, -0.6706014,
	0.2127970, -0.1892390, 0.6582707, -0.4727983, -0.2453246, 1.1640626,
	-1.0468564, 0.1188369, 1.0032814, 0.0069049, 0.2016867, -0.1946021,
	-0.0876739, -0.2374049, 1.0433553, -0.5167564, -1.2395772, -0.4655324,
	-0.8836060, 0.4872583, -1.0141984, -0.1590271, -1.2999603, 0.0706256,
	-0.3715080, -0.2624610, 1.0338786, -1.7649128,
}
var eps float64 = 1e-4

func TestVector_Add(t *testing.T) {
	type args struct {
		b Vector
	}
	tests := []struct {
		name string
		a    Vector
		args args
		want Vector
	}{
		{
			name: "Vector 10",
			a:    vector10,
			args: args{b: vector10},
			want: Vector{
				1.11193, 1.02436, 1.83785, 0.20339, -0.85702, 4.33961, -0.28870,
				2.26761, -1.08551, 1.14300,
			},
		},
		{
			name: "Vector 100",
			a:    vector100,
			args: args{b: vector100},
			want: Vector{0.678025, 0.216115, 3.064535, 0.396858, 2.792696, -0.166763, 0.640565,
				2.799526, 1.079733, 4.265913, -0.585890, -1.781581, -0.854078, -1.073390,
				2.531152, -1.000234, 0.124437, 1.753856, 0.551633, 1.724998, -0.940908,
				-0.659419, -1.491423, -0.118088, 2.402099, -0.455138, -1.160996, -2.838610,
				-2.158559, -0.318040, -0.255679, 0.885674, 2.081708, -0.775927, -1.867566,
				0.993349, 0.130688, 1.453264, -1.033951, -2.022531, -0.223970, -2.746627,
				2.488400, 1.334836, -2.360298, 4.964687, -0.343559, -0.177399, 1.523076,
				-3.484241, -0.076177, 2.584984, 2.499339, 3.438189, -0.650509, 0.352978,
				2.992660, 2.444157, 2.140408, -1.517849, -2.043847, -1.478413, 0.773154,
				-1.703882, 3.627198, 1.486291, 2.287533, -1.810824, 1.118266, -2.427036,
				2.704763, 0.557932, 0.475922, 0.102026, -5.062722, 0.318082, 1.727981,
				-1.927171, 2.392793, 0.266312, 0.266347, -0.093841, 0.823999, -1.584911,
				-4.521302, -1.726020, 2.493612, 3.961104, -1.266341, 0.719772, 1.174517,
				-1.354411, -0.374811, 2.573290, 0.575132, -2.962295, -0.189155, -3.472279,
				-3.398201, 1.743305},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.Add(tt.args.b); !got.Equal(tt.want, eps) {
				t.Errorf("Vector.Add() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVector_Negate(t *testing.T) {
	tests := []struct {
		name string
		a    Vector
		want Vector
	}{
		{
			name: "Vector 10",
			a:    vector10,
			want: Vector{
				-0.55597, -0.51218, -0.91893, -0.10169, 0.42851, -2.16980, 0.14435,
				-1.13380, 0.54275, -0.57150,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.Negate(); !got.Equal(tt.want, eps) {
				t.Errorf("Vector.Negate() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVector_Sub(t *testing.T) {
	type args struct {
		b Vector
	}
	tests := []struct {
		name string
		a    Vector
		args args
		want Vector
	}{
		{
			name: "Vector 10",
			a:    vector10,
			args: args{b: vector10},
			want: Vector{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Vector 100",
			a:    vector100,
			args: args{b: vector100},
			want: Vector{
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.Sub(tt.args.b); !got.Equal(tt.want, eps) {
				t.Errorf("Vector.Sub() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVector_HadamardProduct(t *testing.T) {
	type args struct {
		b Vector
	}
	tests := []struct {
		name string
		a    Vector
		args args
		want Vector
	}{
		{
			name: "Vector 10",
			a:    vector10,
			args: args{b: vector10},
			want: Vector{
				0.309098, 0.262328, 0.844427, 0.010342, 0.183619, 4.708050, 0.020837,
				1.285513, 0.294580, 0.326611,
			},
		},
		{
			name: "Vector 100",
			a:    vector100,
			args: args{b: vector100},
			want: Vector{
				0.1149295, 0.0116765, 2.3478439, 0.0393741, 1.9497877, 0.0069524,
				0.1025808, 1.9593371, 0.2914558, 4.5495035, 0.0858167, 0.7935073,
				0.1823623, 0.2880415, 1.6016820, 0.2501168, 0.0038711, 0.7690024,
				0.0760748, 0.7439044, 0.2213271, 0.1087085, 0.5560860, 0.0034862,
				1.4425198, 0.0517876, 0.3369780, 2.0144266, 1.1648438, 0.0252873,
				0.0163429, 0.1961045, 1.0833768, 0.1505158, 0.8719505, 0.2466854,
				0.0042698, 0.5279942, 0.2672638, 1.0226582, 0.0125406, 1.8859901,
				1.5480330, 0.4454465, 1.3927513, 6.1620289, 0.0295082, 0.0078676,
				0.5799404, 3.0349843, 0.0014507, 1.6705353, 1.5616740, 2.9552855,
				0.1057905, 0.0311483, 2.2390035, 1.4934754, 1.1453369, 0.5759664,
				1.0443275, 0.5464261, 0.1494418, 0.7258037, 3.2891404, 0.5522649,
				1.3082016, 0.8197712, 0.3126299, 1.4726257, 1.8289360, 0.0778220,
				0.0566254, 0.0026023, 6.4077890, 0.0252940, 0.7464793, 0.9284967,
				1.4313651, 0.0177305, 0.0177351, 0.0022015, 0.1697435, 0.6279860,
				5.1105424, 0.7447861, 1.5545256, 3.9225856, 0.4009049, 0.1295178,
				0.3448726, 0.4586070, 0.0351208, 1.6554552, 0.0826942, 2.1937973,
				0.0089449, 3.0141797, 2.8869433, 0.7597779,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.HadamardProduct(tt.args.b); !got.Equal(tt.want, eps) {
				t.Errorf("Vector.HadamardProduct() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVector_Sum(t *testing.T) {
	tests := []struct {
		name string
		a    Vector
		want float64
	}{
		{
			name: "Vector 10",
			a:    vector10,
			want: 4.84826,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.Sum(); math.Abs(got-tt.want) > eps {
				t.Errorf("Vector.Sum() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVector_Dot(t *testing.T) {
	type args struct {
		b Vector
	}
	tests := []struct {
		name string
		a    Vector
		args args
		want float64
	}{
		{
			name: "Vector 10",
			a:    vector10,
			args: args{b: vector10},
			want: 8.2454,
		},
		{
			name: "Vector 100",
			a:    vector100,
			args: args{b: vector100},
			want: 99.2239,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.Dot(tt.args.b); math.Abs(got-tt.want) > eps {
				t.Errorf("Vector.Dot() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVector_Lenght(t *testing.T) {
	tests := []struct {
		name string
		a    Vector
		want float64
	}{
		{
			name: "Vector 10",
			a:    vector10,
			want: 2.87148,
		},
		{
			name: "Vector 100",
			a:    vector100,
			want: 9.96112,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.Lenght(); math.Abs(got-tt.want) > eps {
				t.Errorf("Vector.Lenght() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVector_Angle(t *testing.T) {
	type args struct {
		b Vector
	}
	tests := []struct {
		name string
		a    Vector
		args args
		want float64
	}{
		{
			name: "Vector 10",
			a:    vector10,
			args: args{b: vector10},
			want: 0,
		},
		{
			name: "Vector 100",
			a:    vector100,
			args: args{b: vector100},
			want: 0,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.Angle(tt.args.b); math.Abs(got-tt.want) > eps {
				t.Errorf("Vector.Angle() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVector_Cross(t *testing.T) {
	type args struct {
		b Vector
	}
	tests := []struct {
		name string
		a    Vector
		args args
		want Vector
	}{
		{
			name: "Test 1",
			a:    Vector{-1.46841, -0.10889, 0.57472},
			args: args{b: Vector{-0.13026, 0.72508, -1.01551}},
			want: Vector{-0.30614, -1.56604, -1.07890},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.Cross(tt.args.b); !got.Equal(tt.want, eps) {
				t.Errorf("Vector.Cross() = %v, want %v", got, tt.want)
			}
		})
	}
}
